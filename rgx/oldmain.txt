int main(int argc, char **argv){

  String regex = str_init(argv[1], 100);
  int size = 0;
  regex_e *list = NULL;
  list = malloc(size * sizeof(regex_e));
  parse_regex(regex, &list, &size);
  // regex_e *list_regex_e = NULL;
  // String buffer;
  // int len = 0;
  // bool flag = false;
  // int old_i = 0;
  // regex_op r_op;
  
  // for(int i = 0; i < regex.len; i++){
  //   str_reset(&buffer);
  //   len = 0;
  //   switch (regex.str[i]){
  //     case '^':
  //       len ++;
  //       str_char(&buffer, '^');
  //       r_op = start_str;
  //       break;
  //     case '$':
  //       len ++;
  //       str_char(&buffer, '$');
  //       r_op = end_str;
  //       break;
  //     case '.':
  //       len ++;
  //       str_char(&buffer, '.');
  //       r_op = dot;
  //       break;
  //     case '*':
  //       len ++;
  //       str_char(&buffer, '*');
  //       r_op = star;
  //       break;
  //     case '|':
  //       len ++;
  //       str_char(&buffer, '|');
  //       r_op = alter;
  //       break;
  //     case '[':
  //       len ++;
  //       flag = false;
  //       old_i = i;
  //       str_char(&buffer, regex.str[i]);          
  //       for(i = i+1; i < regex.len && flag == false; i++){
  //         if (regex.str[i] == ']') flag = true;
  //         len ++;
  //         str_char(&buffer, regex.str[i]);          
  //       }
  //       if (flag == false){
  //         printf("Not closing set at index: %d\n%s\n", old_i,regex.str);
  //         for(i = 0; i < old_i; i++){
  //           printf(" ");
  //         }
  //         printf("^\n");
  //         return -1;
  //       }
  //       i--;
  //       r_op = set;
  //       break;
  //     case '(':
  //       len ++;
  //       flag = false;
  //       old_i = i;
  //       str_char(&buffer, regex.str[i]);          
  //       for(i = i+1; i < regex.len && flag == false; i++){
  //         if (regex.str[i] == ')') flag = true;
  //         len ++;
  //         str_char(&buffer, regex.str[i]);          
  //       }
  //       if (flag == false){
  //         printf("Not closing group at index: %d\n%s\n", old_i,regex.str);
  //         for(i = 0; i < old_i; i++){
  //           printf(" ");
  //         }
  //         printf("^\n");
  //         return -1;
  //       }
  //       i--;
  //       r_op = group;
  //       break;
  //     case '{':
  //       len ++;
  //       flag = false;
  //       old_i = i;
  //       str_char(&buffer, regex.str[i]);          
  //       for(i = i+1; i < regex.len && flag == false; i++){
  //         if (regex.str[i] == '}') flag = true;
  //         len ++;
  //         str_char(&buffer, regex.str[i]);          
  //       }
  //       if (flag == false){
  //         printf("Not closing range at index: %d\n%s\n", old_i,regex.str);
  //         for(i = 0; i < old_i; i++){
  //           printf(" ");
  //         }
  //         printf("^\n");
  //         return -1;
  //       }
  //       i--;
  //       r_op = range;
  //       break;
  //     default:
  //       printf("default\n");
  //       return 1;
  //       break;
  //   }
  //   // printf("%s\n",buffer.str);
  //   size++;
  //   list = realloc(list, size * sizeof(regex_e));
  //   str_cpy(&list[size - 1].str, buffer);
  //   list[size - 1].r_op = r_op;
  // }

  for(int i = 0; i < size; i++){
    printf("%s-%d\n",list[i].str.str, list[i].r_op);
  }
  return 0;
}

